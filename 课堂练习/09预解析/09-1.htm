<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    
</body>
<script>
    //JavaScript 边编译，边执行
    //所有的 var 都提到最前面，赋值语句在正常位置,var是在当前作用域进行提升
    console.log(a);//undefined 
    var a = 10;
    console.log(a);//10
    if(true)
    {
        var a = 1;
    }
    console.log(a);
    if(false)
    {
        var b = 2;
    }
    console.log(b);

    //var 在当前作用域进行提升
    function fn1(){
        console.log(b);
        var b = 1;
    }
    fn1();
    console.log(b);


    //函数的声明提升到作用域的最前面
    function fn2(){
        fn3();
        function fn3(){
            console.log('hello world');
        }
    }
    fn2();

    //相当于  var foo;
    //          foo();
    //        foo = function(){----}

    //foo();//Error
    var foo = function(){
        console.log('hello world');
    }


    console.log(fo);
    var fo = function(){
        console.log('hello world');
    }
    fo();

    //当变量名称相同时，就会有一个内容覆盖的一个效果



    //作用域叠加
    var q = 1;
    var p = 2;
    function fun (){
        var p = 5;
        var s = 1;
        console.log('fun p = '+p);
        function fun1(){
            p = 6;
            console.log( 'fun1 p = '+p);
        }
        fun1();
    }
    fun();
//一旦声明 函数的变量的作用范围就确定了，不管它在哪里调用
    var name = 'jack';
    function printf(){
        console.log(name);
    }
    function name1(){
        var name = 'rose';
        console.log(name);//rose
        printf();//jack
    }
    name1();

    //通过new Function声明的函数 返回值是全局变量而不遵循静态

    
</script>
</html>